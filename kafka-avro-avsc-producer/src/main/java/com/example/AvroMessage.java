/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class AvroMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7659817674281432104L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroMessage\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"f1\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"localDate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}]},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":4}],\"default\":null},{\"name\":\"amount2\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":4}],\"default\":null},{\"name\":\"localDateTime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<AvroMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String f1;
  private java.time.LocalDate localDate;
  private java.math.BigDecimal amount;
  private java.math.BigDecimal amount2;
  private java.time.LocalDateTime localDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroMessage() {}

  /**
   * All-args constructor.
   * @param f1 The new value for f1
   * @param localDate The new value for localDate
   * @param amount The new value for amount
   * @param amount2 The new value for amount2
   * @param localDateTime The new value for localDateTime
   */
  public AvroMessage(java.lang.String f1, java.time.LocalDate localDate, java.math.BigDecimal amount, java.math.BigDecimal amount2, java.time.LocalDateTime localDateTime) {
    this.f1 = f1;
    this.localDate = localDate;
    this.amount = amount;
    this.amount2 = amount2;
    this.localDateTime = localDateTime;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return f1;
    case 1: return localDate;
    case 2: return amount;
    case 3: return amount2;
    case 4: return localDateTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: f1 = value$ != null ? value$.toString() : null; break;
    case 1: localDate = (java.time.LocalDate)value$; break;
    case 2: amount = (java.math.BigDecimal)value$; break;
    case 3: amount2 = (java.math.BigDecimal)value$; break;
    case 4: localDateTime = (java.time.LocalDateTime)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'f1' field.
   * @return The value of the 'f1' field.
   */
  public java.lang.String getF1() {
    return f1;
  }


  /**
   * Sets the value of the 'f1' field.
   * @param value the value to set.
   */
  public void setF1(java.lang.String value) {
    this.f1 = value;
  }

  /**
   * Gets the value of the 'localDate' field.
   * @return The value of the 'localDate' field.
   */
  public java.time.LocalDate getLocalDate() {
    return localDate;
  }


  /**
   * Sets the value of the 'localDate' field.
   * @param value the value to set.
   */
  public void setLocalDate(java.time.LocalDate value) {
    this.localDate = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.math.BigDecimal getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.math.BigDecimal value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'amount2' field.
   * @return The value of the 'amount2' field.
   */
  public java.math.BigDecimal getAmount2() {
    return amount2;
  }


  /**
   * Sets the value of the 'amount2' field.
   * @param value the value to set.
   */
  public void setAmount2(java.math.BigDecimal value) {
    this.amount2 = value;
  }

  /**
   * Gets the value of the 'localDateTime' field.
   * @return The value of the 'localDateTime' field.
   */
  public java.time.LocalDateTime getLocalDateTime() {
    return localDateTime;
  }


  /**
   * Sets the value of the 'localDateTime' field.
   * @param value the value to set.
   */
  public void setLocalDateTime(java.time.LocalDateTime value) {
    this.localDateTime = value;
  }

  /**
   * Creates a new AvroMessage RecordBuilder.
   * @return A new AvroMessage RecordBuilder
   */
  public static com.example.AvroMessage.Builder newBuilder() {
    return new com.example.AvroMessage.Builder();
  }

  /**
   * Creates a new AvroMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroMessage RecordBuilder
   */
  public static com.example.AvroMessage.Builder newBuilder(com.example.AvroMessage.Builder other) {
    if (other == null) {
      return new com.example.AvroMessage.Builder();
    } else {
      return new com.example.AvroMessage.Builder(other);
    }
  }

  /**
   * Creates a new AvroMessage RecordBuilder by copying an existing AvroMessage instance.
   * @param other The existing instance to copy.
   * @return A new AvroMessage RecordBuilder
   */
  public static com.example.AvroMessage.Builder newBuilder(com.example.AvroMessage other) {
    if (other == null) {
      return new com.example.AvroMessage.Builder();
    } else {
      return new com.example.AvroMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroMessage>
    implements org.apache.avro.data.RecordBuilder<AvroMessage> {

    private java.lang.String f1;
    private java.time.LocalDate localDate;
    private java.math.BigDecimal amount;
    private java.math.BigDecimal amount2;
    private java.time.LocalDateTime localDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.AvroMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.localDate)) {
        this.localDate = data().deepCopy(fields()[1].schema(), other.localDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount2)) {
        this.amount2 = data().deepCopy(fields()[3].schema(), other.amount2);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.localDateTime)) {
        this.localDateTime = data().deepCopy(fields()[4].schema(), other.localDateTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.AvroMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.localDate)) {
        this.localDate = data().deepCopy(fields()[1].schema(), other.localDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount2)) {
        this.amount2 = data().deepCopy(fields()[3].schema(), other.amount2);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.localDateTime)) {
        this.localDateTime = data().deepCopy(fields()[4].schema(), other.localDateTime);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'f1' field.
      * @return The value.
      */
    public java.lang.String getF1() {
      return f1;
    }


    /**
      * Sets the value of the 'f1' field.
      * @param value The value of 'f1'.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder setF1(java.lang.String value) {
      validate(fields()[0], value);
      this.f1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'f1' field has been set.
      * @return True if the 'f1' field has been set, false otherwise.
      */
    public boolean hasF1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'f1' field.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder clearF1() {
      f1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'localDate' field.
      * @return The value.
      */
    public java.time.LocalDate getLocalDate() {
      return localDate;
    }


    /**
      * Sets the value of the 'localDate' field.
      * @param value The value of 'localDate'.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder setLocalDate(java.time.LocalDate value) {
      validate(fields()[1], value);
      this.localDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'localDate' field has been set.
      * @return True if the 'localDate' field has been set, false otherwise.
      */
    public boolean hasLocalDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'localDate' field.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder clearLocalDate() {
      localDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder setAmount(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder clearAmount() {
      amount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount2' field.
      * @return The value.
      */
    public java.math.BigDecimal getAmount2() {
      return amount2;
    }


    /**
      * Sets the value of the 'amount2' field.
      * @param value The value of 'amount2'.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder setAmount2(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.amount2 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount2' field has been set.
      * @return True if the 'amount2' field has been set, false otherwise.
      */
    public boolean hasAmount2() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount2' field.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder clearAmount2() {
      amount2 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'localDateTime' field.
      * @return The value.
      */
    public java.time.LocalDateTime getLocalDateTime() {
      return localDateTime;
    }


    /**
      * Sets the value of the 'localDateTime' field.
      * @param value The value of 'localDateTime'.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder setLocalDateTime(java.time.LocalDateTime value) {
      validate(fields()[4], value);
      this.localDateTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'localDateTime' field has been set.
      * @return True if the 'localDateTime' field has been set, false otherwise.
      */
    public boolean hasLocalDateTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'localDateTime' field.
      * @return This builder.
      */
    public com.example.AvroMessage.Builder clearLocalDateTime() {
      localDateTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroMessage build() {
      try {
        AvroMessage record = new AvroMessage();
        record.f1 = fieldSetFlags()[0] ? this.f1 : (java.lang.String) defaultValue(fields()[0]);
        record.localDate = fieldSetFlags()[1] ? this.localDate : (java.time.LocalDate) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.amount2 = fieldSetFlags()[3] ? this.amount2 : (java.math.BigDecimal) defaultValue(fields()[3]);
        record.localDateTime = fieldSetFlags()[4] ? this.localDateTime : (java.time.LocalDateTime) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroMessage>
    READER$ = (org.apache.avro.io.DatumReader<AvroMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










