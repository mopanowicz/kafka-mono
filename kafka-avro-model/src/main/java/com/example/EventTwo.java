/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EventTwo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4763589279066900781L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventTwo\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"id2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"description2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"timestamp2\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}],\"default\":null},{\"name\":\"decimal2\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":4}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<EventTwo> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventTwo> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventTwo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventTwo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventTwo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventTwo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventTwo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventTwo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventTwo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id2;
  private java.lang.String description2;
  private java.time.LocalDateTime timestamp2;
  private java.math.BigDecimal decimal2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventTwo() {}

  /**
   * All-args constructor.
   * @param id2 The new value for id2
   * @param description2 The new value for description2
   * @param timestamp2 The new value for timestamp2
   * @param decimal2 The new value for decimal2
   */
  public EventTwo(java.lang.String id2, java.lang.String description2, java.time.LocalDateTime timestamp2, java.math.BigDecimal decimal2) {
    this.id2 = id2;
    this.description2 = description2;
    this.timestamp2 = timestamp2;
    this.decimal2 = decimal2;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id2;
    case 1: return description2;
    case 2: return timestamp2;
    case 3: return decimal2;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id2 = value$ != null ? value$.toString() : null; break;
    case 1: description2 = value$ != null ? value$.toString() : null; break;
    case 2: timestamp2 = (java.time.LocalDateTime)value$; break;
    case 3: decimal2 = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id2' field.
   * @return The value of the 'id2' field.
   */
  public java.lang.String getId2() {
    return id2;
  }


  /**
   * Sets the value of the 'id2' field.
   * @param value the value to set.
   */
  public void setId2(java.lang.String value) {
    this.id2 = value;
  }

  /**
   * Gets the value of the 'description2' field.
   * @return The value of the 'description2' field.
   */
  public java.lang.String getDescription2() {
    return description2;
  }


  /**
   * Sets the value of the 'description2' field.
   * @param value the value to set.
   */
  public void setDescription2(java.lang.String value) {
    this.description2 = value;
  }

  /**
   * Gets the value of the 'timestamp2' field.
   * @return The value of the 'timestamp2' field.
   */
  public java.time.LocalDateTime getTimestamp2() {
    return timestamp2;
  }


  /**
   * Sets the value of the 'timestamp2' field.
   * @param value the value to set.
   */
  public void setTimestamp2(java.time.LocalDateTime value) {
    this.timestamp2 = value;
  }

  /**
   * Gets the value of the 'decimal2' field.
   * @return The value of the 'decimal2' field.
   */
  public java.math.BigDecimal getDecimal2() {
    return decimal2;
  }


  /**
   * Sets the value of the 'decimal2' field.
   * @param value the value to set.
   */
  public void setDecimal2(java.math.BigDecimal value) {
    this.decimal2 = value;
  }

  /**
   * Creates a new EventTwo RecordBuilder.
   * @return A new EventTwo RecordBuilder
   */
  public static com.example.EventTwo.Builder newBuilder() {
    return new com.example.EventTwo.Builder();
  }

  /**
   * Creates a new EventTwo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventTwo RecordBuilder
   */
  public static com.example.EventTwo.Builder newBuilder(com.example.EventTwo.Builder other) {
    if (other == null) {
      return new com.example.EventTwo.Builder();
    } else {
      return new com.example.EventTwo.Builder(other);
    }
  }

  /**
   * Creates a new EventTwo RecordBuilder by copying an existing EventTwo instance.
   * @param other The existing instance to copy.
   * @return A new EventTwo RecordBuilder
   */
  public static com.example.EventTwo.Builder newBuilder(com.example.EventTwo other) {
    if (other == null) {
      return new com.example.EventTwo.Builder();
    } else {
      return new com.example.EventTwo.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventTwo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventTwo>
    implements org.apache.avro.data.RecordBuilder<EventTwo> {

    private java.lang.String id2;
    private java.lang.String description2;
    private java.time.LocalDateTime timestamp2;
    private java.math.BigDecimal decimal2;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.EventTwo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id2)) {
        this.id2 = data().deepCopy(fields()[0].schema(), other.id2);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.description2)) {
        this.description2 = data().deepCopy(fields()[1].schema(), other.description2);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp2)) {
        this.timestamp2 = data().deepCopy(fields()[2].schema(), other.timestamp2);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.decimal2)) {
        this.decimal2 = data().deepCopy(fields()[3].schema(), other.decimal2);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing EventTwo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.EventTwo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id2)) {
        this.id2 = data().deepCopy(fields()[0].schema(), other.id2);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description2)) {
        this.description2 = data().deepCopy(fields()[1].schema(), other.description2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp2)) {
        this.timestamp2 = data().deepCopy(fields()[2].schema(), other.timestamp2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.decimal2)) {
        this.decimal2 = data().deepCopy(fields()[3].schema(), other.decimal2);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id2' field.
      * @return The value.
      */
    public java.lang.String getId2() {
      return id2;
    }


    /**
      * Sets the value of the 'id2' field.
      * @param value The value of 'id2'.
      * @return This builder.
      */
    public com.example.EventTwo.Builder setId2(java.lang.String value) {
      validate(fields()[0], value);
      this.id2 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id2' field has been set.
      * @return True if the 'id2' field has been set, false otherwise.
      */
    public boolean hasId2() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id2' field.
      * @return This builder.
      */
    public com.example.EventTwo.Builder clearId2() {
      id2 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'description2' field.
      * @return The value.
      */
    public java.lang.String getDescription2() {
      return description2;
    }


    /**
      * Sets the value of the 'description2' field.
      * @param value The value of 'description2'.
      * @return This builder.
      */
    public com.example.EventTwo.Builder setDescription2(java.lang.String value) {
      validate(fields()[1], value);
      this.description2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'description2' field has been set.
      * @return True if the 'description2' field has been set, false otherwise.
      */
    public boolean hasDescription2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'description2' field.
      * @return This builder.
      */
    public com.example.EventTwo.Builder clearDescription2() {
      description2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp2' field.
      * @return The value.
      */
    public java.time.LocalDateTime getTimestamp2() {
      return timestamp2;
    }


    /**
      * Sets the value of the 'timestamp2' field.
      * @param value The value of 'timestamp2'.
      * @return This builder.
      */
    public com.example.EventTwo.Builder setTimestamp2(java.time.LocalDateTime value) {
      validate(fields()[2], value);
      this.timestamp2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp2' field has been set.
      * @return True if the 'timestamp2' field has been set, false otherwise.
      */
    public boolean hasTimestamp2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp2' field.
      * @return This builder.
      */
    public com.example.EventTwo.Builder clearTimestamp2() {
      timestamp2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'decimal2' field.
      * @return The value.
      */
    public java.math.BigDecimal getDecimal2() {
      return decimal2;
    }


    /**
      * Sets the value of the 'decimal2' field.
      * @param value The value of 'decimal2'.
      * @return This builder.
      */
    public com.example.EventTwo.Builder setDecimal2(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.decimal2 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'decimal2' field has been set.
      * @return True if the 'decimal2' field has been set, false otherwise.
      */
    public boolean hasDecimal2() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'decimal2' field.
      * @return This builder.
      */
    public com.example.EventTwo.Builder clearDecimal2() {
      decimal2 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventTwo build() {
      try {
        EventTwo record = new EventTwo();
        record.id2 = fieldSetFlags()[0] ? this.id2 : (java.lang.String) defaultValue(fields()[0]);
        record.description2 = fieldSetFlags()[1] ? this.description2 : (java.lang.String) defaultValue(fields()[1]);
        record.timestamp2 = fieldSetFlags()[2] ? this.timestamp2 : (java.time.LocalDateTime) defaultValue(fields()[2]);
        record.decimal2 = fieldSetFlags()[3] ? this.decimal2 : (java.math.BigDecimal) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventTwo>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventTwo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventTwo>
    READER$ = (org.apache.avro.io.DatumReader<EventTwo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










